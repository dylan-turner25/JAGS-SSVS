rm(list = ls()) # clear console
options(scipen = 999) # forces R to avoid exponential notation
system.info <- Sys.info()
setwd()


# load libraries 
library(runjags) # need to install JAGS first, which is independent of R
library(tidyverse)

# load cleaned data
data <- read_csv("./Data/cleaned_data_09_20_20.csv") %>% drop_na()

regressors <- data[,-c(1,2)] # use all regressors
#regressors <- data[,c("prem_fc","hhinc","probcat31","expdamage","risk","sfha",
#                      "flood_exp","newtocoast","stormrisk","retreat","armor","affect_homeloss",
#                      "eloan","eia","hhsize","age","higheredu")] # use some regressors



# put data into jags format
#Y <- data$floodins # flood insurance
Y <- (data$flcov * (nrow(data) - 1) + .5) / nrow(data) # flood coverage
n <- length(Y)  
X <- as.matrix(regressors)
b <- ncol(X) # number of parameters under consideration

#put data into list format that JAGS likes
data.list <- list(Y = Y, n = n, X = X, b = b)
data.runjags <- dump.format(data.list)

#define the model string
model <- "model{
    for(i in 1:n){
  
  # outcome variable is distributed beta
  Y[i]  ~ dbeta(r*mu[i],r*(1-mu[i]))
  
  # use the logit link function
  logit(mu[i]) <- cons + inprod(X[i,],delta)
}

for (j in 1:b) {
ind[j]~dbern(pind)  
deltaT[j]~dnorm(0,taub)
delta[j]<-ind[j]*deltaT[j]
}
cons~dnorm(0,0.0001)
r ~ dgamma(0.1,0.1)
tau~dgamma(1,1)
taub~dgamma(1,1)
pind~dbeta(2,8)

}"

monitor <- c("cons","delta","ind","tau","taub","pind","r")
inits <- list()

# while loop than randomly searches for appropriate starting values
find_inits <- 0 # set to 1 to search for starting values
if(find_inits == 1){
  run <- F
  attempt <- 0
  while(run == F){
    attempt <- attempt + 1
    if(attempt > 20000){
      run <- T
      print("Could not find appropriate starting values after 20,000 attempts")
    }
    
    tryCatch({   
        
      # set initial values for each chain
        chains <- 2
        for (m in 1:chains) {
          assign(paste("inits", m , sep = ""), list(tau = runif(1,0,1),taub = runif(1,0,1),cons = runif(1,0,1), r =runif(1,0,1) ,deltaT=runif(b,-1,1) ,ind=runif(b,0,1),.RNG.name = "base::Wichmann-Hill", .RNG.seed = sample(1:1000,1))) 
          inits[[m]] <- eval(parse(text = paste("inits",m, sep = "")))      
        }
    
    
      # run the model and assign it to a numbered object "jags.output"
        jags.output <- run.jags(model = model, method = "parallel",monitor = monitor , 
                                thin = 10, inits = inits, data = data.runjags , adapt = 10000, 
                                n.chains = chains, burnin = 10000, sample = 10000, keep.jags.files = F)
        run <- T
    }, error = function(e){cat("ERROR :",conditionMessage(e), "\n")})
  }
}


chains <- 2
for (m in 1:chains) {
  assign(paste("inits", m , sep = ""), list(tau = 1,taub = 1.5,cons = -.1, r =.5 ,deltaT = runif(b,-.2,2) ,ind=rep(.5,b),.RNG.name = "base::Wichmann-Hill", .RNG.seed = sample(1:1000,1))) 
  inits[[m]] <- eval(parse(text = paste("inits",m, sep = "")))      
}

# run the model and assign it to a numbered object "jags.output"
chains <- 2
jags.output <- run.jags(model = model, method = "parallel",monitor = monitor , 
                        thin = 10, data = data.runjags , adapt = 10000, 
                        n.chains = chains, burnin = 10000, sample = 10000, keep.jags.files = F)


# put results into a data frame
jags.df <- data.frame(summary(jags.output))
jags.df$var_names <- c("cons",colnames(regressors),colnames(regressors),"tau","taub","pind","r")
jags.df <- jags.df[,c(ncol(jags.df),1:ncol(jags.df)-1)]

# loop keeps running saving results to a csv file every a specified number of 
# samples are added to the chain
while (1 == 1 ) {
  # save R environment image in case of a crash
  save.image("SSVS_Results.Rdata")
  
  # save intermediate results to a csv file
  write.csv(jags.df,paste("SSVS_Results_",jags.output$sample,".csv",sep=""), row.names = T)
  
  # extend the chain
  jags.output <- extend.jags(jags.output, sample = 10000, adapt = 10000, thin = 10)
  
  # put output in data.frame
  jags.df <- data.frame(summary(jags.output))
  jags.df$var_names <- c("cons",colnames(regressors),colnames(regressors),"tau","taub","pind","r")
  jags.df <- jags.df[,c(ncol(jags.df),1:ncol(jags.df)-1)]
}

# Examine Diagnostic Plots
plot(jags.output$mcmc, var = "delta", 
     plot.type = c("trace","density","autocorr"), layout = c(3,1)) 





